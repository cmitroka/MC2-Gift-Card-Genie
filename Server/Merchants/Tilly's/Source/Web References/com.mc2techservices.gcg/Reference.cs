//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace DVB.com.mc2techservices.gcg {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceSoap", Namespace="gcg.mc2techservices.com")]
    public partial class WebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetURLForEXEOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveURLForEXEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWDDataForEXEOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveWDDataForEXEOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMerchantRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionIDAndAdInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadAllDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ArchiveNewVendorRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ContinueRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGlobalSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMerchantStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMerchantCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckWebConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordFeedbackOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoAppStartupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoAppStartup2OperationCompleted;
        
        private System.Threading.SendOrPostCallback LogPurchaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogConsideredBuyingOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOldBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback BackupDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService() {
            this.Url = global::DVB.Properties.Settings.Default.BBandB_com_mc2techservices_gcg_WebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetURLForEXECompletedEventHandler GetURLForEXECompleted;
        
        /// <remarks/>
        public event SaveURLForEXECompletedEventHandler SaveURLForEXECompleted;
        
        /// <remarks/>
        public event GetWDDataForEXECompletedEventHandler GetWDDataForEXECompleted;
        
        /// <remarks/>
        public event SaveWDDataForEXECompletedEventHandler SaveWDDataForEXECompleted;
        
        /// <remarks/>
        public event AddMerchantRequestCompletedEventHandler AddMerchantRequestCompleted;
        
        /// <remarks/>
        public event GetSessionIDAndAdInfoCompletedEventHandler GetSessionIDAndAdInfoCompleted;
        
        /// <remarks/>
        public event DownloadAllDataCompletedEventHandler DownloadAllDataCompleted;
        
        /// <remarks/>
        public event NewRequestCompletedEventHandler NewRequestCompleted;
        
        /// <remarks/>
        public event ArchiveNewVendorRequestCompletedEventHandler ArchiveNewVendorRequestCompleted;
        
        /// <remarks/>
        public event ContinueRequestCompletedEventHandler ContinueRequestCompleted;
        
        /// <remarks/>
        public event GetGlobalSettingsCompletedEventHandler GetGlobalSettingsCompleted;
        
        /// <remarks/>
        public event GetMerchantStatusesCompletedEventHandler GetMerchantStatusesCompleted;
        
        /// <remarks/>
        public event GetMerchantCountCompletedEventHandler GetMerchantCountCompleted;
        
        /// <remarks/>
        public event CheckWebConfigCompletedEventHandler CheckWebConfigCompleted;
        
        /// <remarks/>
        public event RecordFeedbackCompletedEventHandler RecordFeedbackCompleted;
        
        /// <remarks/>
        public event DoAppStartupCompletedEventHandler DoAppStartupCompleted;
        
        /// <remarks/>
        public event DoAppStartup2CompletedEventHandler DoAppStartup2Completed;
        
        /// <remarks/>
        public event LogPurchaseCompletedEventHandler LogPurchaseCompleted;
        
        /// <remarks/>
        public event LogConsideredBuyingCompletedEventHandler LogConsideredBuyingCompleted;
        
        /// <remarks/>
        public event DeleteOldBackupCompletedEventHandler DeleteOldBackupCompleted;
        
        /// <remarks/>
        public event BackupDataCompletedEventHandler BackupDataCompleted;
        
        /// <remarks/>
        public event RetrieveDataCompletedEventHandler RetrieveDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/Login", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Login(string UserName, string Password) {
            object[] results = this.Invoke("Login", new object[] {
                        UserName,
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string UserName, string Password) {
            this.LoginAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string UserName, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        UserName,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetURLForEXE", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetURLForEXE(string pEXE, string pPassword) {
            object[] results = this.Invoke("GetURLForEXE", new object[] {
                        pEXE,
                        pPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetURLForEXEAsync(string pEXE, string pPassword) {
            this.GetURLForEXEAsync(pEXE, pPassword, null);
        }
        
        /// <remarks/>
        public void GetURLForEXEAsync(string pEXE, string pPassword, object userState) {
            if ((this.GetURLForEXEOperationCompleted == null)) {
                this.GetURLForEXEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetURLForEXEOperationCompleted);
            }
            this.InvokeAsync("GetURLForEXE", new object[] {
                        pEXE,
                        pPassword}, this.GetURLForEXEOperationCompleted, userState);
        }
        
        private void OnGetURLForEXEOperationCompleted(object arg) {
            if ((this.GetURLForEXECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetURLForEXECompleted(this, new GetURLForEXECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/SaveURLForEXE", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveURLForEXE(string pEXE, string pURL, string pPassword) {
            object[] results = this.Invoke("SaveURLForEXE", new object[] {
                        pEXE,
                        pURL,
                        pPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveURLForEXEAsync(string pEXE, string pURL, string pPassword) {
            this.SaveURLForEXEAsync(pEXE, pURL, pPassword, null);
        }
        
        /// <remarks/>
        public void SaveURLForEXEAsync(string pEXE, string pURL, string pPassword, object userState) {
            if ((this.SaveURLForEXEOperationCompleted == null)) {
                this.SaveURLForEXEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveURLForEXEOperationCompleted);
            }
            this.InvokeAsync("SaveURLForEXE", new object[] {
                        pEXE,
                        pURL,
                        pPassword}, this.SaveURLForEXEOperationCompleted, userState);
        }
        
        private void OnSaveURLForEXEOperationCompleted(object arg) {
            if ((this.SaveURLForEXECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveURLForEXECompleted(this, new SaveURLForEXECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetWDDataForEXE", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetWDDataForEXE(string pEXE, string pPassword) {
            object[] results = this.Invoke("GetWDDataForEXE", new object[] {
                        pEXE,
                        pPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWDDataForEXEAsync(string pEXE, string pPassword) {
            this.GetWDDataForEXEAsync(pEXE, pPassword, null);
        }
        
        /// <remarks/>
        public void GetWDDataForEXEAsync(string pEXE, string pPassword, object userState) {
            if ((this.GetWDDataForEXEOperationCompleted == null)) {
                this.GetWDDataForEXEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWDDataForEXEOperationCompleted);
            }
            this.InvokeAsync("GetWDDataForEXE", new object[] {
                        pEXE,
                        pPassword}, this.GetWDDataForEXEOperationCompleted, userState);
        }
        
        private void OnGetWDDataForEXEOperationCompleted(object arg) {
            if ((this.GetWDDataForEXECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWDDataForEXECompleted(this, new GetWDDataForEXECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/SaveWDDataForEXE", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveWDDataForEXE(string pEXE, string pURL, string pCardNum, string pCardPIN, string pCredLogin, string pCredPassword, string pPassword) {
            object[] results = this.Invoke("SaveWDDataForEXE", new object[] {
                        pEXE,
                        pURL,
                        pCardNum,
                        pCardPIN,
                        pCredLogin,
                        pCredPassword,
                        pPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveWDDataForEXEAsync(string pEXE, string pURL, string pCardNum, string pCardPIN, string pCredLogin, string pCredPassword, string pPassword) {
            this.SaveWDDataForEXEAsync(pEXE, pURL, pCardNum, pCardPIN, pCredLogin, pCredPassword, pPassword, null);
        }
        
        /// <remarks/>
        public void SaveWDDataForEXEAsync(string pEXE, string pURL, string pCardNum, string pCardPIN, string pCredLogin, string pCredPassword, string pPassword, object userState) {
            if ((this.SaveWDDataForEXEOperationCompleted == null)) {
                this.SaveWDDataForEXEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveWDDataForEXEOperationCompleted);
            }
            this.InvokeAsync("SaveWDDataForEXE", new object[] {
                        pEXE,
                        pURL,
                        pCardNum,
                        pCardPIN,
                        pCredLogin,
                        pCredPassword,
                        pPassword}, this.SaveWDDataForEXEOperationCompleted, userState);
        }
        
        private void OnSaveWDDataForEXEOperationCompleted(object arg) {
            if ((this.SaveWDDataForEXECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveWDDataForEXECompleted(this, new SaveWDDataForEXECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/AddMerchantRequest", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddMerchantRequest(string pMerchant, string pURL, string pCardNum, string pCardPIN, string pOtherInfo) {
            object[] results = this.Invoke("AddMerchantRequest", new object[] {
                        pMerchant,
                        pURL,
                        pCardNum,
                        pCardPIN,
                        pOtherInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMerchantRequestAsync(string pMerchant, string pURL, string pCardNum, string pCardPIN, string pOtherInfo) {
            this.AddMerchantRequestAsync(pMerchant, pURL, pCardNum, pCardPIN, pOtherInfo, null);
        }
        
        /// <remarks/>
        public void AddMerchantRequestAsync(string pMerchant, string pURL, string pCardNum, string pCardPIN, string pOtherInfo, object userState) {
            if ((this.AddMerchantRequestOperationCompleted == null)) {
                this.AddMerchantRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMerchantRequestOperationCompleted);
            }
            this.InvokeAsync("AddMerchantRequest", new object[] {
                        pMerchant,
                        pURL,
                        pCardNum,
                        pCardPIN,
                        pOtherInfo}, this.AddMerchantRequestOperationCompleted, userState);
        }
        
        private void OnAddMerchantRequestOperationCompleted(object arg) {
            if ((this.AddMerchantRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMerchantRequestCompleted(this, new AddMerchantRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetSessionIDAndAdInfo", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSessionIDAndAdInfo(string UUID, string CardType) {
            object[] results = this.Invoke("GetSessionIDAndAdInfo", new object[] {
                        UUID,
                        CardType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionIDAndAdInfoAsync(string UUID, string CardType) {
            this.GetSessionIDAndAdInfoAsync(UUID, CardType, null);
        }
        
        /// <remarks/>
        public void GetSessionIDAndAdInfoAsync(string UUID, string CardType, object userState) {
            if ((this.GetSessionIDAndAdInfoOperationCompleted == null)) {
                this.GetSessionIDAndAdInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionIDAndAdInfoOperationCompleted);
            }
            this.InvokeAsync("GetSessionIDAndAdInfo", new object[] {
                        UUID,
                        CardType}, this.GetSessionIDAndAdInfoOperationCompleted, userState);
        }
        
        private void OnGetSessionIDAndAdInfoOperationCompleted(object arg) {
            if ((this.GetSessionIDAndAdInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionIDAndAdInfoCompleted(this, new GetSessionIDAndAdInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/DownloadAllData", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadAllData() {
            object[] results = this.Invoke("DownloadAllData", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadAllDataAsync() {
            this.DownloadAllDataAsync(null);
        }
        
        /// <remarks/>
        public void DownloadAllDataAsync(object userState) {
            if ((this.DownloadAllDataOperationCompleted == null)) {
                this.DownloadAllDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadAllDataOperationCompleted);
            }
            this.InvokeAsync("DownloadAllData", new object[0], this.DownloadAllDataOperationCompleted, userState);
        }
        
        private void OnDownloadAllDataOperationCompleted(object arg) {
            if ((this.DownloadAllDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadAllDataCompleted(this, new DownloadAllDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/NewRequest", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewRequest(string UUID, string SessionID, string CheckSum, string CardType, string CardNumber, string PIN, [System.Xml.Serialization.XmlElementAttribute("Login")] string Login1, string Password) {
            object[] results = this.Invoke("NewRequest", new object[] {
                        UUID,
                        SessionID,
                        CheckSum,
                        CardType,
                        CardNumber,
                        PIN,
                        Login1,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewRequestAsync(string UUID, string SessionID, string CheckSum, string CardType, string CardNumber, string PIN, string Login1, string Password) {
            this.NewRequestAsync(UUID, SessionID, CheckSum, CardType, CardNumber, PIN, Login1, Password, null);
        }
        
        /// <remarks/>
        public void NewRequestAsync(string UUID, string SessionID, string CheckSum, string CardType, string CardNumber, string PIN, string Login1, string Password, object userState) {
            if ((this.NewRequestOperationCompleted == null)) {
                this.NewRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewRequestOperationCompleted);
            }
            this.InvokeAsync("NewRequest", new object[] {
                        UUID,
                        SessionID,
                        CheckSum,
                        CardType,
                        CardNumber,
                        PIN,
                        Login1,
                        Password}, this.NewRequestOperationCompleted, userState);
        }
        
        private void OnNewRequestOperationCompleted(object arg) {
            if ((this.NewRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewRequestCompleted(this, new NewRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/ArchiveNewVendorRequest", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ArchiveNewVendorRequest(string UUID, string Merchant, string URL, string CardNumber, string CardPIN, string TimeLogged) {
            object[] results = this.Invoke("ArchiveNewVendorRequest", new object[] {
                        UUID,
                        Merchant,
                        URL,
                        CardNumber,
                        CardPIN,
                        TimeLogged});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ArchiveNewVendorRequestAsync(string UUID, string Merchant, string URL, string CardNumber, string CardPIN, string TimeLogged) {
            this.ArchiveNewVendorRequestAsync(UUID, Merchant, URL, CardNumber, CardPIN, TimeLogged, null);
        }
        
        /// <remarks/>
        public void ArchiveNewVendorRequestAsync(string UUID, string Merchant, string URL, string CardNumber, string CardPIN, string TimeLogged, object userState) {
            if ((this.ArchiveNewVendorRequestOperationCompleted == null)) {
                this.ArchiveNewVendorRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArchiveNewVendorRequestOperationCompleted);
            }
            this.InvokeAsync("ArchiveNewVendorRequest", new object[] {
                        UUID,
                        Merchant,
                        URL,
                        CardNumber,
                        CardPIN,
                        TimeLogged}, this.ArchiveNewVendorRequestOperationCompleted, userState);
        }
        
        private void OnArchiveNewVendorRequestOperationCompleted(object arg) {
            if ((this.ArchiveNewVendorRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ArchiveNewVendorRequestCompleted(this, new ArchiveNewVendorRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/ContinueRequest", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ContinueRequest(string pUUID, string pIDFileName, string pAnswer) {
            object[] results = this.Invoke("ContinueRequest", new object[] {
                        pUUID,
                        pIDFileName,
                        pAnswer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ContinueRequestAsync(string pUUID, string pIDFileName, string pAnswer) {
            this.ContinueRequestAsync(pUUID, pIDFileName, pAnswer, null);
        }
        
        /// <remarks/>
        public void ContinueRequestAsync(string pUUID, string pIDFileName, string pAnswer, object userState) {
            if ((this.ContinueRequestOperationCompleted == null)) {
                this.ContinueRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnContinueRequestOperationCompleted);
            }
            this.InvokeAsync("ContinueRequest", new object[] {
                        pUUID,
                        pIDFileName,
                        pAnswer}, this.ContinueRequestOperationCompleted, userState);
        }
        
        private void OnContinueRequestOperationCompleted(object arg) {
            if ((this.ContinueRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ContinueRequestCompleted(this, new ContinueRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetGlobalSettings", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetGlobalSettings() {
            object[] results = this.Invoke("GetGlobalSettings", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGlobalSettingsAsync() {
            this.GetGlobalSettingsAsync(null);
        }
        
        /// <remarks/>
        public void GetGlobalSettingsAsync(object userState) {
            if ((this.GetGlobalSettingsOperationCompleted == null)) {
                this.GetGlobalSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGlobalSettingsOperationCompleted);
            }
            this.InvokeAsync("GetGlobalSettings", new object[0], this.GetGlobalSettingsOperationCompleted, userState);
        }
        
        private void OnGetGlobalSettingsOperationCompleted(object arg) {
            if ((this.GetGlobalSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGlobalSettingsCompleted(this, new GetGlobalSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetMerchantStatuses", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMerchantStatuses(string pSupportCode) {
            object[] results = this.Invoke("GetMerchantStatuses", new object[] {
                        pSupportCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMerchantStatusesAsync(string pSupportCode) {
            this.GetMerchantStatusesAsync(pSupportCode, null);
        }
        
        /// <remarks/>
        public void GetMerchantStatusesAsync(string pSupportCode, object userState) {
            if ((this.GetMerchantStatusesOperationCompleted == null)) {
                this.GetMerchantStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMerchantStatusesOperationCompleted);
            }
            this.InvokeAsync("GetMerchantStatuses", new object[] {
                        pSupportCode}, this.GetMerchantStatusesOperationCompleted, userState);
        }
        
        private void OnGetMerchantStatusesOperationCompleted(object arg) {
            if ((this.GetMerchantStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMerchantStatusesCompleted(this, new GetMerchantStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/GetMerchantCount", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMerchantCount() {
            object[] results = this.Invoke("GetMerchantCount", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMerchantCountAsync() {
            this.GetMerchantCountAsync(null);
        }
        
        /// <remarks/>
        public void GetMerchantCountAsync(object userState) {
            if ((this.GetMerchantCountOperationCompleted == null)) {
                this.GetMerchantCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMerchantCountOperationCompleted);
            }
            this.InvokeAsync("GetMerchantCount", new object[0], this.GetMerchantCountOperationCompleted, userState);
        }
        
        private void OnGetMerchantCountOperationCompleted(object arg) {
            if ((this.GetMerchantCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMerchantCountCompleted(this, new GetMerchantCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/CheckWebConfig", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckWebConfig() {
            object[] results = this.Invoke("CheckWebConfig", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckWebConfigAsync() {
            this.CheckWebConfigAsync(null);
        }
        
        /// <remarks/>
        public void CheckWebConfigAsync(object userState) {
            if ((this.CheckWebConfigOperationCompleted == null)) {
                this.CheckWebConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckWebConfigOperationCompleted);
            }
            this.InvokeAsync("CheckWebConfig", new object[0], this.CheckWebConfigOperationCompleted, userState);
        }
        
        private void OnCheckWebConfigOperationCompleted(object arg) {
            if ((this.CheckWebConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckWebConfigCompleted(this, new CheckWebConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/RecordFeedback", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecordFeedback(string UUID, string Name, string ContactInfo, string Feedback) {
            object[] results = this.Invoke("RecordFeedback", new object[] {
                        UUID,
                        Name,
                        ContactInfo,
                        Feedback});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecordFeedbackAsync(string UUID, string Name, string ContactInfo, string Feedback) {
            this.RecordFeedbackAsync(UUID, Name, ContactInfo, Feedback, null);
        }
        
        /// <remarks/>
        public void RecordFeedbackAsync(string UUID, string Name, string ContactInfo, string Feedback, object userState) {
            if ((this.RecordFeedbackOperationCompleted == null)) {
                this.RecordFeedbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordFeedbackOperationCompleted);
            }
            this.InvokeAsync("RecordFeedback", new object[] {
                        UUID,
                        Name,
                        ContactInfo,
                        Feedback}, this.RecordFeedbackOperationCompleted, userState);
        }
        
        private void OnRecordFeedbackOperationCompleted(object arg) {
            if ((this.RecordFeedbackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordFeedbackCompleted(this, new RecordFeedbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/DoAppStartup", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoAppStartup(string UUID) {
            object[] results = this.Invoke("DoAppStartup", new object[] {
                        UUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoAppStartupAsync(string UUID) {
            this.DoAppStartupAsync(UUID, null);
        }
        
        /// <remarks/>
        public void DoAppStartupAsync(string UUID, object userState) {
            if ((this.DoAppStartupOperationCompleted == null)) {
                this.DoAppStartupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoAppStartupOperationCompleted);
            }
            this.InvokeAsync("DoAppStartup", new object[] {
                        UUID}, this.DoAppStartupOperationCompleted, userState);
        }
        
        private void OnDoAppStartupOperationCompleted(object arg) {
            if ((this.DoAppStartupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoAppStartupCompleted(this, new DoAppStartupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/DoAppStartup2", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoAppStartup2(string UUID, string Version) {
            object[] results = this.Invoke("DoAppStartup2", new object[] {
                        UUID,
                        Version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoAppStartup2Async(string UUID, string Version) {
            this.DoAppStartup2Async(UUID, Version, null);
        }
        
        /// <remarks/>
        public void DoAppStartup2Async(string UUID, string Version, object userState) {
            if ((this.DoAppStartup2OperationCompleted == null)) {
                this.DoAppStartup2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoAppStartup2OperationCompleted);
            }
            this.InvokeAsync("DoAppStartup2", new object[] {
                        UUID,
                        Version}, this.DoAppStartup2OperationCompleted, userState);
        }
        
        private void OnDoAppStartup2OperationCompleted(object arg) {
            if ((this.DoAppStartup2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoAppStartup2Completed(this, new DoAppStartup2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/LogPurchase", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogPurchase(string SessionID, string CheckSum, string UUID, string PurchaseType) {
            object[] results = this.Invoke("LogPurchase", new object[] {
                        SessionID,
                        CheckSum,
                        UUID,
                        PurchaseType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogPurchaseAsync(string SessionID, string CheckSum, string UUID, string PurchaseType) {
            this.LogPurchaseAsync(SessionID, CheckSum, UUID, PurchaseType, null);
        }
        
        /// <remarks/>
        public void LogPurchaseAsync(string SessionID, string CheckSum, string UUID, string PurchaseType, object userState) {
            if ((this.LogPurchaseOperationCompleted == null)) {
                this.LogPurchaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogPurchaseOperationCompleted);
            }
            this.InvokeAsync("LogPurchase", new object[] {
                        SessionID,
                        CheckSum,
                        UUID,
                        PurchaseType}, this.LogPurchaseOperationCompleted, userState);
        }
        
        private void OnLogPurchaseOperationCompleted(object arg) {
            if ((this.LogPurchaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogPurchaseCompleted(this, new LogPurchaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/LogConsideredBuying", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogConsideredBuying(string UUID, string Option) {
            object[] results = this.Invoke("LogConsideredBuying", new object[] {
                        UUID,
                        Option});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogConsideredBuyingAsync(string UUID, string Option) {
            this.LogConsideredBuyingAsync(UUID, Option, null);
        }
        
        /// <remarks/>
        public void LogConsideredBuyingAsync(string UUID, string Option, object userState) {
            if ((this.LogConsideredBuyingOperationCompleted == null)) {
                this.LogConsideredBuyingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogConsideredBuyingOperationCompleted);
            }
            this.InvokeAsync("LogConsideredBuying", new object[] {
                        UUID,
                        Option}, this.LogConsideredBuyingOperationCompleted, userState);
        }
        
        private void OnLogConsideredBuyingOperationCompleted(object arg) {
            if ((this.LogConsideredBuyingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogConsideredBuyingCompleted(this, new LogConsideredBuyingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/DeleteOldBackup", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteOldBackup(string UUID) {
            object[] results = this.Invoke("DeleteOldBackup", new object[] {
                        UUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOldBackupAsync(string UUID) {
            this.DeleteOldBackupAsync(UUID, null);
        }
        
        /// <remarks/>
        public void DeleteOldBackupAsync(string UUID, object userState) {
            if ((this.DeleteOldBackupOperationCompleted == null)) {
                this.DeleteOldBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOldBackupOperationCompleted);
            }
            this.InvokeAsync("DeleteOldBackup", new object[] {
                        UUID}, this.DeleteOldBackupOperationCompleted, userState);
        }
        
        private void OnDeleteOldBackupOperationCompleted(object arg) {
            if ((this.DeleteOldBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOldBackupCompleted(this, new DeleteOldBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/BackupData", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BackupData(string UUID, string AllData) {
            object[] results = this.Invoke("BackupData", new object[] {
                        UUID,
                        AllData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BackupDataAsync(string UUID, string AllData) {
            this.BackupDataAsync(UUID, AllData, null);
        }
        
        /// <remarks/>
        public void BackupDataAsync(string UUID, string AllData, object userState) {
            if ((this.BackupDataOperationCompleted == null)) {
                this.BackupDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBackupDataOperationCompleted);
            }
            this.InvokeAsync("BackupData", new object[] {
                        UUID,
                        AllData}, this.BackupDataOperationCompleted, userState);
        }
        
        private void OnBackupDataOperationCompleted(object arg) {
            if ((this.BackupDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BackupDataCompleted(this, new BackupDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("gcg.mc2techservices.com/RetrieveData", RequestNamespace="gcg.mc2techservices.com", ResponseNamespace="gcg.mc2techservices.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RetrieveData(string UUID, string RetrievalKey) {
            object[] results = this.Invoke("RetrieveData", new object[] {
                        UUID,
                        RetrievalKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveDataAsync(string UUID, string RetrievalKey) {
            this.RetrieveDataAsync(UUID, RetrievalKey, null);
        }
        
        /// <remarks/>
        public void RetrieveDataAsync(string UUID, string RetrievalKey, object userState) {
            if ((this.RetrieveDataOperationCompleted == null)) {
                this.RetrieveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveDataOperationCompleted);
            }
            this.InvokeAsync("RetrieveData", new object[] {
                        UUID,
                        RetrievalKey}, this.RetrieveDataOperationCompleted, userState);
        }
        
        private void OnRetrieveDataOperationCompleted(object arg) {
            if ((this.RetrieveDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveDataCompleted(this, new RetrieveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetURLForEXECompletedEventHandler(object sender, GetURLForEXECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetURLForEXECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetURLForEXECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveURLForEXECompletedEventHandler(object sender, SaveURLForEXECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveURLForEXECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveURLForEXECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetWDDataForEXECompletedEventHandler(object sender, GetWDDataForEXECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWDDataForEXECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWDDataForEXECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveWDDataForEXECompletedEventHandler(object sender, SaveWDDataForEXECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveWDDataForEXECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveWDDataForEXECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddMerchantRequestCompletedEventHandler(object sender, AddMerchantRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMerchantRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMerchantRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSessionIDAndAdInfoCompletedEventHandler(object sender, GetSessionIDAndAdInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionIDAndAdInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionIDAndAdInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadAllDataCompletedEventHandler(object sender, DownloadAllDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadAllDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadAllDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void NewRequestCompletedEventHandler(object sender, NewRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ArchiveNewVendorRequestCompletedEventHandler(object sender, ArchiveNewVendorRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ArchiveNewVendorRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ArchiveNewVendorRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ContinueRequestCompletedEventHandler(object sender, ContinueRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ContinueRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ContinueRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGlobalSettingsCompletedEventHandler(object sender, GetGlobalSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGlobalSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGlobalSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMerchantStatusesCompletedEventHandler(object sender, GetMerchantStatusesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMerchantStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMerchantStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMerchantCountCompletedEventHandler(object sender, GetMerchantCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMerchantCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMerchantCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckWebConfigCompletedEventHandler(object sender, CheckWebConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckWebConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckWebConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RecordFeedbackCompletedEventHandler(object sender, RecordFeedbackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordFeedbackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordFeedbackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DoAppStartupCompletedEventHandler(object sender, DoAppStartupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoAppStartupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoAppStartupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DoAppStartup2CompletedEventHandler(object sender, DoAppStartup2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoAppStartup2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoAppStartup2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogPurchaseCompletedEventHandler(object sender, LogPurchaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogPurchaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogPurchaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogConsideredBuyingCompletedEventHandler(object sender, LogConsideredBuyingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogConsideredBuyingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogConsideredBuyingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteOldBackupCompletedEventHandler(object sender, DeleteOldBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOldBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOldBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BackupDataCompletedEventHandler(object sender, BackupDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BackupDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BackupDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RetrieveDataCompletedEventHandler(object sender, RetrieveDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591